from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
import aiohttp
import re
import logging 
from config_reader import config


router = Router()
users = {}

class ProfileStates(StatesGroup):
    weight = State()
    height = State()
    age = State()
    activity = State()
    city = State()

class FoodState(StatesGroup):
    grams = State()

@router.message(Command("help"))
async def cmd_start(message: Message):
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–¥–æ—Ä–æ–≤–æ–º—É –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏!\n\n"
        "üìã –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è\n"
        "/set_profile - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–≤–µ—Å, —Ä–æ—Å—Ç, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –¥—Ä.)\n\n"
        "‚ùìÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ\n"
        "/my_profile - –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ñ–∏–ª–µ\n\n"
        "üíß –£—á—ë—Ç –≤–æ–¥—ã\n"
        "/log_water <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> - –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–ø–∏—Ç—É—é –≤–æ–¥—É (–≤ –º–ª)\n\n"
        "üçé –£—á—ë—Ç –ø–∏—Ç–∞–Ω–∏—è\n"
        "/log_food <–ø—Ä–æ–¥—É–∫—Ç> - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Ç—Ä–µ–±–ª—ë–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏\n\n"
        "‚ö° –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
        "/log_workout <—Ç–∏–ø> <–º–∏–Ω—É—Ç—ã> - –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n\n"
        "üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
        "/check_progress - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏\n\n"
        "üåç –î–ª—è —Ä–∞—Å—á—ë—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—é —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –∏ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö!\n"
        "–ù–∞—á–Ω–∏—Ç–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∫–æ–º–∞–Ω–¥–æ–π /set_profile"
    )
    await message.answer(welcome_text)

# openweathermap API
async def get_temperature(city: str) -> float:
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={config.OPENWEATHERMAP_API_KEY}&units=metric"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status != 200:
                raise ValueError("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            data = await response.json()
            return data["main"]["temp"]

@router.message(Command("set_profile"))
async def cmd_set_profile(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
    await state.set_state(ProfileStates.weight)

@router.message(ProfileStates.weight)
async def process_weight(message: Message, state: FSMContext):
    try:
        weight = float(message.text)
        await state.update_data(weight=weight)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
        await state.set_state(ProfileStates.height)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@router.message(ProfileStates.height)
async def process_height(message: Message, state: FSMContext):
    try:
        height = float(message.text)
        await state.update_data(height=height)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
        await state.set_state(ProfileStates.age)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@router.message(ProfileStates.age)
async def process_age(message: Message, state: FSMContext):
    try:
        age = int(message.text)
        await state.update_data(age=age)
        await message.answer("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –¥–µ–Ω—å?")
        await state.set_state(ProfileStates.activity)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")

@router.message(ProfileStates.activity)
async def process_activity(message: Message, state: FSMContext):
    try:
        activity = int(message.text)
        await state.update_data(activity=activity)
        await message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
        await state.set_state(ProfileStates.city)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç")

@router.message(ProfileStates.city)
async def process_city(message: Message, state: FSMContext):
    city = message.text.strip()
    
    if not re.match(r'^[a-zA-Z\s\'-]+$', city):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞")
        return
        
    try:
        temperature = await get_temperature(city)
        data = await state.get_data()
        
        water_base = data["weight"] * 30
        water_activity = (data["activity"] // 30) * 500
        water_weather = 500 if temperature > 25 else 0
        water_goal = water_base + water_activity + water_weather
        
        calorie_base = 10*data["weight"] + 6.25*data["height"] - 5*data["age"] + 5
        calorie_activity = (data["activity"] // 30) * 300
        calorie_goal = calorie_base + calorie_activity
        
        users[message.from_user.id] = {
            **data,
            "city": city,
            "water_goal": water_goal,
            "calorie_goal": calorie_goal,
            "logged_water": 0,
            "logged_calories": 0,
            "burned_calories": 0
        }
        await message.answer(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –≤–≤–µ–¥–∏—Ç–µ /my_profile")
        
    except ValueError as e:
        await message.answer(f"‚ùå {str(e)}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞")
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        logging.error(f"Weather API error: {str(e)}")
    
    await state.clear()

@router.message(Command("my_profile"))
async def cmd_my_profile(message: Message):
    user = users.get(message.from_user.id)
    if not user:
        await message.answer("‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /set_profile")
        return
    
    profile_info = (
        "üìã –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"‚öñÔ∏è –í–µ—Å: {user['weight']} –∫–≥\n"
        f"üìè –†–æ—Å—Ç: {user['height']} —Å–º\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user['age']} –ª–µ—Ç\n"
        f"üèÉ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user['activity']} –º–∏–Ω/–¥–µ–Ω—å\n"
        f"üåç –ì–æ—Ä–æ–¥: {user['city']}\n\n"
        f"üíß –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –≤–æ–¥—ã: {user['water_goal']} –º–ª\n"
        f"üî• –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {user['calorie_goal']} –∫–∫–∞–ª"
    )
    
    await message.answer(profile_info)

@router.message(Command("log_water"))
async def cmd_log_water(message: Message):
    try:
        amount = float(message.text.split()[1])
        user = users.get(message.from_user.id)
        if user:
            user["logged_water"] += amount
            remaining = user["water_goal"] - user["logged_water"]
            await message.answer(f"üíß –ó–∞–ø–∏—Å–∞–Ω–æ: {amount} –º–ª. –û—Å—Ç–∞–ª–æ—Å—å: {max(remaining, 0)} –º–ª")
        else:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å")
    except (IndexError, ValueError):
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ: /log_water <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>")

@router.message(Command("log_food"))
async def cmd_log_food(message: Message, state: FSMContext):
    try:
        product_name = message.text.split(maxsplit=1)[1].strip()
        if not product_name:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞")
            return
        
        url = f"https://world.openfoodfacts.org/cgi/search.pl?action=process&search_terms={product_name}&json=true"
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status != 200:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
                    return
                
                data = await response.json()
                products = data.get("products", [])
                
                if not products:
                    await message.answer("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
                    return
                
                first_product = products[0]
                product_name = first_product.get("product_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç")
                kcal = first_product.get("nutriments", {}).get("energy-kcal_100g", 0)
                
                if not kcal:
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∞")
                    return
                
                await message.answer(f"üçé {product_name} - {kcal} –∫–∫–∞–ª/100–≥. –°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?")
                await state.update_data(kcal=kcal)
                await state.set_state(FoodState.grams)
                
    except IndexError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ: /log_food <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞>")
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        logging.error(f"Food API error: {str(e)}")

@router.message(FoodState.grams)
async def process_food_grams(message: Message, state: FSMContext):
    try:
        grams = float(message.text)
        data = await state.get_data()
        kcal = (grams / 100) * data["kcal"]
        user = users.get(message.from_user.id)
        if user:
            user["logged_calories"] += kcal
            await message.answer(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {round(kcal, 1)} –∫–∫–∞–ª")
        else:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    await state.clear()

# Workout Logging
@router.message(Command("log_workout"))
async def cmd_log_workout(message: Message):
    try:
        _, workout_type, duration = message.text.split()
        duration = int(duration)
        user = users.get(message.from_user.id)
        if user:
            burned = duration * 10
            water = (duration // 30) * 200
            
            user["burned_calories"] += burned
            user["water_goal"] += water
            
            await message.answer(
                f"‚ö° {workout_type} {duration} –º–∏–Ω\n"
                f"üî• –°–æ–∂–∂–µ–Ω–æ: {burned} –∫–∫–∞–ª\n"
                f"üíß –í—ã–ø–µ–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {water} –º–ª"
            )
        else:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å")
    except Exception:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ: /log_workout <—Ç–∏–ø> <–º–∏–Ω—É—Ç—ã>")

@router.message(Command("check_progress"))
async def cmd_check_progress(message: Message):
    user = users.get(message.from_user.id)
    if user:
        water_remaining = user["water_goal"] - user["logged_water"]
        calories_remaining = user["calorie_goal"] - (user["logged_calories"] - user["burned_calories"])
        
        response = (
            "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n\n"
            f"üíß –í–æ–¥–∞: {user['logged_water']}/{user['water_goal']} –º–ª "
            f"(–û—Å—Ç–∞–ª–æ—Å—å: {max(water_remaining, 0)} –º–ª)\n\n"
            f"üî• –ö–∞–ª–æ—Ä–∏–∏:\n"
            f"‚Ä¢ –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {user['logged_calories']} –∫–∫–∞–ª\n"
            f"‚Ä¢ –°–æ–∂–∂–µ–Ω–æ: {user['burned_calories']} –∫–∫–∞–ª\n"
            f"‚Ä¢ –ë–∞–ª–∞–Ω—Å: {user['logged_calories'] - user['burned_calories']} –∫–∫–∞–ª\n"
            f"‚Ä¢ –¶–µ–ª—å: {user['calorie_goal']} –∫–∫–∞–ª\n"
            f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {max(calories_remaining, 0)} –∫–∫–∞–ª"
        )
        await message.answer(response)
    else:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å")